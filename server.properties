#### Important settings ####
############################

## To enable automatic Let's Encrypt certificates set both host and contact email here
## Blynk server also have to listen on port 80 to generate certificate
#server.host=myhost.com
#contact.email=kienkhoiphuc@gmail.com


## Default admin name and password that will be created on first start of the server
## IMPORTANT change default values to secure your installation
admin.email=kienkhoiphuc@gmail.com
admin.pass=admin

#### Ports ####
###############
## TLS port for HTTPS, web sockets and mobile apps
https.port=9443

## Non-secure port for HTTP, plain web sockets and hardware
http.port=8080

## MQTT port for hardware
#hardware.mqtt.port=8440

## Force CSV downloads to use port 80
## If 'true' CSV download url will ignore http.port and use port 80 
force.port.80.for.csv=false

## Force redirect_command to use port 80 
## If 'true' redirect_command will ignore http.port and use port 80 
force.port.80.for.redirect=true

## Address to listen
## By default listen all interfaces
listen.address=

#### Host and SSL/TLS Certificates ####
#######################################

## By default server uses certificate embedded in jar for secure connections, but it doens't provide real security
## IMPORTANT always use Let's Encrypt or provide own certificates for installations exposed to the internet

## You may also pass your own SSL certificate. Don't forget to mount key and cert in docker-compose.yml
#server.ssl.cert=./server_embedded.crt
#server.ssl.key=./server_embedded.pem
#server.ssl.key.pass=pupkin123

## Web page that will be user password reset.
## In most cases it should be the same as server.host (see below)
#restore.host=myhost.com

## Service name to be shown on password reset page
#product.name=Blynk


#### Directories and logging ####
#################################

## Data directory (normally provided as command line parameter)
data.folder=/data

## Log directory
logs.folder=./logs

## Log level. One of [trace|debug|info|error]. Defines how precise logging will be.
log.level=info

## Size of async logger ring buffer
## Should be increased for loads >2-3k requests/second
async.logger.ring.buffer.size=2048


#### User restrictions ####
###########################

## Initial amount of energy
initial.energy=100000

## Maximum number of devices allowed per account
user.devices.limit=50

## <aximum number of tags allowed per account
user.tags.limit=100

## Defines maximum allowed number of user dashboards. Needed to limit possible number of tokens.
user.dashboard.max.limit=100

## Defines maximum allowed widget size in KBs as json string.
user.widget.max.size.limit=20

## Messaging quota (events per second)
user.message.quota.limit=100

## User's profile maximum size (in Kb)
user.profile.max.size=128


#### Widgets and data processing ####
####################################

## Max number of events in notification queue
## This queue is used for different notification channels, like: email, pushes and twits
notifications.queue.limit=2000

## Number of threads for performing blocking operations - push, twits, emails, db queries
## It's recommended to keep this number small unless you have to perform a lot of operations
blocking.processor.thread.pool.limit=6

#this setting defines how often we can send mail/tweet/push or any other notification. Specified in seconds
notifications.frequency.user.quota.limit=5

## Minimal interval between webhooks (in miliseconds)
webhooks.frequency.user.quota.limit=1000

## GET Webhook's maximum response size (in Kb)
webhooks.response.size.limit=96

## Maximum number of strings to be stored in terminal widget
terminal.strings.pool.size=25

## Maximum number of strings to be stored in map widget
map.strings.pool.size=25

## Maximum number of strings to be stored in LCD widget
lcd.strings.pool.size=6

## Maximum number of rows in a table
table.rows.pool.size=100

# Max size of web request (in bytes)
# 524288 = 512 Kb (512x1024) 
web.request.max.size=524288

# Maximum number of points that are fetched during CSV export
#43200 == 60 * 24 * 30 - minutes points for 1 month
csv.export.data.points.max=43200

## Allows reading worker to trigger hardware even app is offline
allow.reading.widget.without.active.app=false


#### Disk interaction ####
##########################

# How often users DB will be saved to disk (in ms)
# 60000 ms = 1 minute
profile.save.worker.period=60000

# How often statistics DB will be saved to disk (in ms)
# 60000 ms = 1 minute
stats.print.worker.period=60000


#### Database ####
##################

## Use DB 
enable.db=false

## Store raw data to DB
enable.raw.db.data.store=false


#### Privacy ####
#################

## Allows server to store hardware and app IP addresses
## When 'true' IPs will be stored
allow.store.ip=false


#### Network ####
#################

## Period of inactivity for hardware socket (in seconds)
## If device will be inactive for this time it will be disconnected
## Leave it empty for infinity timeout
hard.socket.idle.timeout=10

## Network interface to determine server's current IP
## Only first characters of the interface's name are required
net.interface=eth


#### Administrator interface ####
#################################

## Path of admin panel
## It will be available on https://myhost.com:9443/admin
admin.rootPath=/admin

## Comma separated list of administrator IPs 
## Attempts to connect 
## You may set it for 0.0.0.0/0 to allow access for everyone
## Or set subnet mask: 192.168.0.53/24 
## In this case users with all IPs from 192.168.0.1 to 192.168.0.254 will be able to connect
allowed.administrator.ips=0.0.0.0/0,::/0

